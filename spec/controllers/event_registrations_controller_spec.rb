require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe EventRegistrationsController do

  def mock_event_registration(stubs={})
    @mock_event_registration ||= mock_model(EventRegistration, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all event_registrations as @event_registrations" do
      EventRegistration.stub(:all) { [mock_event_registration] }
      get :index
      assigns(:event_registrations).should eq([mock_event_registration])
    end
  end

  describe "GET show" do
    it "assigns the requested event_registration as @event_registration" do
      EventRegistration.stub(:find).with("37") { mock_event_registration }
      get :show, :id => "37"
      assigns(:event_registration).should be(mock_event_registration)
    end
  end

  describe "GET new" do
    it "assigns a new event_registration as @event_registration" do
      EventRegistration.stub(:new) { mock_event_registration }
      get :new
      assigns(:event_registration).should be(mock_event_registration)
    end
  end

  describe "GET edit" do
    it "assigns the requested event_registration as @event_registration" do
      EventRegistration.stub(:find).with("37") { mock_event_registration }
      get :edit, :id => "37"
      assigns(:event_registration).should be(mock_event_registration)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created event_registration as @event_registration" do
        EventRegistration.stub(:new).with({'these' => 'params'}) { mock_event_registration(:save => true) }
        post :create, :event_registration => {'these' => 'params'}
        assigns(:event_registration).should be(mock_event_registration)
      end

      it "redirects to the created event_registration" do
        EventRegistration.stub(:new) { mock_event_registration(:save => true) }
        post :create, :event_registration => {}
        response.should redirect_to(event_registration_url(mock_event_registration))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved event_registration as @event_registration" do
        EventRegistration.stub(:new).with({'these' => 'params'}) { mock_event_registration(:save => false) }
        post :create, :event_registration => {'these' => 'params'}
        assigns(:event_registration).should be(mock_event_registration)
      end

      it "re-renders the 'new' template" do
        EventRegistration.stub(:new) { mock_event_registration(:save => false) }
        post :create, :event_registration => {}
        response.should render_template("new")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested event_registration" do
      EventRegistration.stub(:find).with("37") { mock_event_registration }
      mock_event_registration.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the event_registrations list" do
      EventRegistration.stub(:find) { mock_event_registration }
      delete :destroy, :id => "1"
      response.should redirect_to(event_registrations_url)
    end
  end

end
